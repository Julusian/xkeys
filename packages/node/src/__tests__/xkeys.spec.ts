import * as HID from 'node-hid'
import * as HIDMock from '../__mocks__/node-hid'
import { setupXkeysPanel, XKeys } from '../'
import { getSentData, handleXkeysMessages, resetSentData } from './lib'

describe('Unit tests', () => {
	test('calculateDelta', () => {
		expect(XKeys.calculateDelta(100, 100)).toBe(0)
		expect(XKeys.calculateDelta(110, 100)).toBe(10)
		expect(XKeys.calculateDelta(90, 100)).toBe(-10)
		expect(XKeys.calculateDelta(0, 255)).toBe(1)
		expect(XKeys.calculateDelta(5, 250)).toBe(11)
		expect(XKeys.calculateDelta(255, 0)).toBe(-1)
		expect(XKeys.calculateDelta(250, 5)).toBe(-11)
	})
	test('XKeys methods', async () => {
		// const panel = new XKeys()

		const hidDevice = {
			vendorId: XKeys.vendorId,
			productId: 1029,
			interface: 0,
			path: 'mockPath',
		} as HID.Device

		HIDMock.setMockWriteHandler(handleXkeysMessages)

		const myXkeysPanel = await setupXkeysPanel(hidDevice)

		const onError = jest.fn(console.log)

		myXkeysPanel.on('error', onError)

		resetSentData()

		expect(myXkeysPanel.firmwareVersion).toBe(0)
		resetSentData()
		expect(myXkeysPanel.unitId).toBe(0)
		resetSentData()
		expect(myXkeysPanel.info).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.getButtons()
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setIndicatorLED(5, true)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setIndicatorLED(5, false)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setIndicatorLED(5, true, true)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()

		myXkeysPanel.setBacklight(5, '59f')
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setBacklight(5, '5599ff')
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setBacklight(5, '#5599ff')
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setBacklight(5, { r: 45, g: 210, b: 255 })
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setBacklight(5, true)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setBacklight(5, false)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setBacklight(5, null)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setBacklight(5, null)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setBacklight(5, '59f', true)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()

		myXkeysPanel.setAllBacklights('59f')
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setAllBacklights('5599ff')
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setAllBacklights('#5599ff')
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setAllBacklights({ r: 45, g: 210, b: 255 })
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setAllBacklights(true)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setAllBacklights(false)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setAllBacklights(null)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setAllBacklights(null)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()

		myXkeysPanel.toggleAllBacklights()
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setBacklightIntensity(100)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setBacklightIntensity(0, 255)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.saveBackLights()
		expect(getSentData()).toMatchSnapshot()
		resetSentData()

		myXkeysPanel.setFrequency(127)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.setUnitId(42)
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		myXkeysPanel.rebootDevice()
		expect(getSentData()).toMatchSnapshot()
		resetSentData()
		// expect(myXkeysPanel.writeLcdDisplay(line: number, displayChar: string, backlight: boolean)
		// expect(getSentData()).toMatchSnapshot()
		// resetSentData()

		myXkeysPanel.writeData([0, 1, 2, 3, 4])
		expect(getSentData()).toMatchSnapshot()
		resetSentData()

		expect(onError).toHaveBeenCalledTimes(0)
	})
})
